% README
%
% Documents using this package must be compiled using lualatex with the 
% --shell-escape option because the package makes calls to git.


\ProvidesPackage{citegit}

% Package dependencies
\RequirePackage{hyperref}
\RequirePackage{kvoptions}
\RequirePackage{xstring}
\RequirePackage{xparse}
\RequirePackage{luacode}

% Package options
\DeclareStringOption[\jobname.tex]{source}
\DeclareStringOption[\jobname.pdf]{target}
\DeclareStringOption{dir}
\DeclareStringOption[10]{hashes}
\ProcessKeyvalOptions*

% Lua functions
\luadirect{require('citegit')}

\begin{luacode}
	source = \luastring{\jobname} .. '.tex'
	depends = {source}
\end{luacode}

\IfStrEq{\citegit@dir}{}{%
	% If \citegit@dir has not been specified then the working directory is . and
	% the latest commit should only involve the current job and its dependencies
	\def\citegit@dir{.}%
	% Input the dependencies of the current job
	\begin{luacode*}
		if table.getn(depends) == 0 do
			table.insert(depends, source)
		done
\end{luacode*}
}{%
	% If \citegit@dir has been specified then the latest commit should involve
	% anything in the directory \citegit@dir
	% \begin{luacode}
	% 	depends = \citegit@dir
	% \end{luacode}
}

% Input the latest commit hash
\def\githash{\luadirect{printGitinfo(\luastring{H}, depends)}}
\def\gitdate{\luadirect{printGitinfo(\luastring{ad}, depends)}}
\def\gitauthor{\luadirect{printGitinfo(\luastring{an}, depends)}}
\def\gitmessage{\luadirect{printGitinfo(\luastring{s}, depends)}}

% Input the repository status
\begin{luacode*}
	-- The repository status.
	clean = gitClean(true, depends)
	cleanStar = gitClean(false, depends)

	-- The GitHub repository.
	githubRepo = github()
\end{luacode*}
% Temporary laziness.
\def\citegit@github{\luadirect{printGithub()}}

% Print a backslash character or macro name
\newcommand\citegit@char@backslash[1]{%
	\IfStrEq{#1}{}{%
		\textbackslash%
	}{%
		\texttt{\char`\\#1}%
	}%
}

% Print a number character or issue reference
\newcommand\citegit@char@number[1]{%
	\IfStrEq{#1}{}{%
		\#%
	}{%
		\IfStrEq{\citegit@github}{}{%
			\##1%
		}{%
			\href{https://github.com/\citegit@github/issues/#1}{\##1}%
		}%
	}%
}

% Test whether (the relevant part of) the repository has uncommitted changes
% Usage: \ifclean[*]{...clean...}{...unclean...}
\DeclareDocumentCommand{\ifclean}{smm}{%
	% If a star is present then any untracked files will be ignored
	\IfBooleanTF{#1}{%
		\luadirect{
			if cleanstar then
				tex.sprint(\luastring{#2})
			else
				tex.sprint(\luastring{#3})
			end
		}%
	}{%
		\luadirect{
			if clean then
				tex.sprint(\luastring{#2})
			else
				tex.sprint(\luastring{#3})
			end
		}%
	}%
}

% Cite a file in the repository
% Usage: \citegit[line--line][file]{hash}
\DeclareDocumentCommand{\citegit}{O{}O{}mO{}}{%
	% Shorten the hash if necessary
	\IfInteger{\citegit@hashes}{%
		\StrLeft{#3}{\citegit@hashes}[\citegit@hash]%
	}{%
		\def\citegit@hash{#3}%
	}%
	\IfStrEq{#2}{}{%
		% The first argument is the file because there is no second argument
		\def\citegit@file{#1}%
		\def\citegit@line{}%
		\def\citegit@lineurl{}%
	}{%
		% The second argument is the file and the first argument is the line
		\def\citegit@file{#2}%
		\def\citegit@linearg{#1--}%
		\StrBefore{\citegit@linearg}{--}[\citegit@linefrom]%
		\StrBetween[1,2]{\citegit@linearg}{--}{--}[\citegit@lineto]%
		\IfInteger{\citegit@lineto}{%
			\def\citegit@line{, lines \citegit@linefrom--\citegit@lineto}%
			\def\citegit@lineurl{\#L\citegit@linefrom-\citegit@lineto}%
		}{%
			\def\citegit@line{, line \citegit@linefrom}%
			\def\citegit@lineurl{\#L\citegit@linefrom}%
		}%
	}%
	\IfStrEq{\citegit@file}{}{}{%
		% Input the file path relative to the root of the repository
		\def\citegit@fileurl{\luadirect{printGitpath(\luastring{\citegit@dir}, 
		\luastring{\citegit@file})}}
	}%
	% Build the citation
	\def\citegit@citation{%
		\IfStrEq{\citegit@github}{}{%
			\texttt{\citegit@hash}%
			\IfStrEq{\citegit@file}{}{}{
				(\texttt{\citegit@file}\citegit@line)%
			}%
		}{%
			\href{https://github.com/\citegit@github/tree/#3}{\texttt{\citegit@hash}}%
			\IfStrEq{\citegit@file}{}{}{
				(\href{%
					https://github.com/\citegit@github/blob/%
					#3\citegit@fileurl\citegit@lineurl%
				}{%
					\texttt{\citegit@file}\citegit@line%
				})%
			}%
		}%
	}%
	% Print the citation or assign it to a macro
	\IfStrEq{\detokenize{#4}}{}{%
		\citegit@citation%
	}{%
		\let#4\citegit@citation%
	}%
}
