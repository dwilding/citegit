% README
%
% Documents using this package must be compiled with the --shell-escape option.

\ProvidesPackage{citegit}

% Package dependencies
\RequirePackage{hyperref}
\RequirePackage{kvoptions}
\RequirePackage{xstring}
\RequirePackage{xparse}

% Package options
\DeclareStringOption[\jobname.tex]{source}
\DeclareStringOption[\jobname.pdf]{target}
\DeclareStringOption{dir}
\DeclareStringOption[10]{hashes}
\ProcessKeyvalOptions*

\IfStrEq{\citegit@dir}{}{%
	% If \citegit@dir has not been specified then the working directory is . and
	% the latest commit should only involve the current job and its dependencies
	\def\citegit@dir{.}%
	% Output the dependencies of the current job
	\immediate\write18{%
		for file in GNUmakefile makefile Makefile;%
			do if [ -f $file ];%
				then depends=($(grep \citegit@target: $file | cut -d ':' -f 2-));%
				if [ ! -z $depends ]; then break; fi;%
			fi;%
		done;%
		if [ -z $depends ];%
			then depends=($(egrep \unexpanded{'\\input|\\include'} \citegit@source |%
			sed -n \unexpanded{'s/^[ \t]*\(\\input\|\\include\){\([^\.]*\)\(\.tex\)*}/\2\.tex/p'} |%
			tr \unexpanded{'\n'} ' ') \citegit@source);%
		fi;%
		for file in ${depends[@]};%
			do if [ -h $file ];%
				then readlink -n $file; echo -n ' ';%
				else echo -n $file' ';%
			fi;%
		done > \jobname.stdout%
	}%
	% Input the dependencies as \citegit@filter, using a method described here:
	% http://tex.stackexchange.com/questions/16790/
	\begingroup\makeatletter\endlinechar=\m@ne\everyeof{\noexpand}%
	\edef\x{\endgroup\def\noexpand\citegit@filter{\@@input \jobname.stdout }}\x%
}{%
	% If \citegit@dir has been specified then the latest commit should involve
	% anything in the directory \citegit@dir
	\def\citegit@filter{'\citegit@dir'}%
}

% Print a macro name
\newcommand\citegit@macro[1]{%
	\texttt{\char`\\#1}%
}

% Get information about the latest commit and define an appropriate macro
% Usage: \citegit@info{csname}{flag}
\newcommand\citegit@info[2]{%
	% Output information about the latest commit
	\immediate\write18{%
		git log -1 --format='\@percentchar#2' -- \citegit@filter |%
		sed \unexpanded{'s/\\\([@a-z]*\)/\\noexpand\\citegit@macro{\1}/gi'} > \jobname.stdout%
	}%
	% Input the commit information as \git#1, using a method described here:
	% http://tex.stackexchange.com/questions/16790/
	\begingroup\makeatletter\endlinechar=\m@ne\everyeof{\noexpand}%
	\edef\x{\endgroup\def\csname git#1\endcsname{\@@input \jobname.stdout }}\x%
}

% Define macros relating to the latest commit
\citegit@info{hash}{H}
\citegit@info{date}{ad}
\citegit@info{author}{an}
\citegit@info{message}{s}

% Output the first remote repository that is hosted on GitHub
\immediate\write18{%
	git remote -v |%
	sed -n \unexpanded{'s/.*git@github.com:\(.*\)\.git.*/\1/p'} |%
	head -1 > \jobname.stdout%
}

% Input the remote repository as \citegit@github, using a method described here:
% http://tex.stackexchange.com/questions/16790/
\begingroup\makeatletter\endlinechar=\m@ne\everyeof{\noexpand}
\edef\x{\endgroup\def\noexpand\citegit@github{\@@input \jobname.stdout }}\x

% Cite a file in the repository
% Usage: \citegit[line--line][file]{hash}
\DeclareDocumentCommand{\citegit}{O{}O{}m}{%
	% Shorten the hash if necessary
	\IfInteger{\citegit@hashes}{%
		\StrLeft{#3}{\citegit@hashes}[\citegit@hash]%
	}{%
		\def\citegit@hash{#3}%
	}
	\IfStrEq{#2}{}{%
		% The first argument is the file because there is no second argument
		\def\citegit@file{#1}%
		\def\citegit@line{}%
		\def\citegit@lineurl{}%
	}{%
		% The second argument is the file and the first argument is the line
		\def\citegit@file{#2}%
		\def\citegit@linearg{#1--}%
		\StrBefore{\citegit@linearg}{--}[\citegit@linefrom]%
		\StrBetween[1,2]{\citegit@linearg}{--}{--}[\citegit@lineto]%
		\IfInteger{\citegit@lineto}{%
			\def\citegit@line{, lines \citegit@linefrom--\citegit@lineto}%
			\def\citegit@lineurl{\#L\citegit@linefrom-\citegit@lineto}%
		}{%
			\def\citegit@line{, line \citegit@linefrom}%
			\def\citegit@lineurl{\#L\citegit@linefrom}%
		}%
	}%
	\IfStrEq{\citegit@file}{}{}{%
		% Output the file path relative to the root of the repository
		\immediate\write18{%
			repo=$(readlink -mn "$(git rev-parse --show-toplevel)");%
			path=$(cd '\citegit@dir'; readlink -mn '\citegit@file');%
			echo "${path##$repo}" > \jobname.stdout%
		}%
		% Input the path as \citegit@fileurl, using a method described here:
		% http://tex.stackexchange.com/questions/16790/
		\begingroup\makeatletter\endlinechar=\m@ne\everyeof{\noexpand}%
		\edef\x{\endgroup\def\noexpand\citegit@fileurl{\@@input \jobname.stdout }}\x%
	}%
	% Print the citation
	\IfStrEq{\citegit@github}{}{%
		\texttt{\citegit@hash}
		\IfStrEq{\citegit@file}{}{}{%
			(\texttt{\citegit@file}\citegit@line)%
		}%
	}{%
		\href{https://github.com/\citegit@github/tree/#3}{\texttt{\citegit@hash}}
		\IfStrEq{\citegit@file}{}{}{%
			(\href{%
				https://github.com/\citegit@github/blob/%
				#3\citegit@fileurl\citegit@lineurl%
			}{%
				\texttt{\citegit@file}\citegit@line%
			})%
		}%
	}%
}

% Test whether (the relevant part of) the repository has uncommitted changes
% Usage: \ifclean[*]{...clean...}{...unclean...}
\DeclareDocumentCommand{\ifclean}{smm}{%
	% If a star is present then any untracked files will be ignored
	\IfBooleanTF{#1}{%
		\def\citegit@untracked{--untracked-files=no }%
	}{%
		\def\citegit@untracked{}%
	}%
	% Output the repository status
	\immediate\write18{%
		git status --porcelain \citegit@untracked -- \citegit@filter > \jobname.stdout%
	}%
	% Input the repository status as \citegit@status, using a method described here:
	% http://tex.stackexchange.com/questions/16790/
	\begingroup\makeatletter\endlinechar=\m@ne\everyeof{\noexpand}%
	\edef\x{\endgroup\def\noexpand\citegit@status{\@@input \jobname.stdout }}\x%
	% If \citegit@status is empty then the repository is clean
	\IfStrEq{\citegit@status}{}{#2}{#3}%
}
